{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMStSbGX3FZDawte/q8NzsY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/samuelsantanaperales/prueba_datascience/blob/main/prueba%20%20de%20analsis%20de%20datos%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# para su mayor practicidad el codigo fue desarrollado en colab\n",
        "# librerias que se van a requerir\n",
        "\n",
        "import pandas as pd\n",
        "from google.colab import files\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n"
      ],
      "metadata": {
        "id": "LWzDhSIF6U-_"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# cargar el archivo desde la pc\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Acceder al archivo cargado (asumiendo que solo cargas uno)\n",
        "for filename in uploaded.keys():\n",
        "    df = pd.read_csv(filename)\n",
        "\n",
        "# mostrar los datos para comprobar\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "collapsed": true,
        "id": "4anNm8Kg6vG2",
        "outputId": "30252781-780e-4c7c-e2fc-64b1326d5f67"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-d2a7e13e-9533-4276-a2b9-582ab0d9ffe2\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-d2a7e13e-9533-4276-a2b9-582ab0d9ffe2\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving archivo.csv to archivo (20).csv\n",
            "         fecha    producto cantidad  precio_unitario\n",
            "0   2024-01-01           0        A              5.0\n",
            "1   2024-01-01  Producto B        9              9.0\n",
            "2   2024-01-02           0       20              5.0\n",
            "3   2024-01-02  Producto C       15              4.0\n",
            "4   2024-01-02  Producto B       15              3.0\n",
            "5   2024-01-03  Producto C                       3.5\n",
            "6          NaN  Producto A       20              5.0\n",
            "7   2024-01-02  Producto C       15              2.0\n",
            "8   2024-01-04  Producto B       15             15.0\n",
            "9   2024-01-07  Producto C       15              0.0\n",
            "10  2024-01-07  Producto C       15             15.0\n",
            "11  2024-01-03  Producto C        5              7.0\n",
            "12  2024-01-04  Producto A       15             15.0\n",
            "13  2024-01-07  Producto B       15              0.0\n",
            "14  2024-01-07  Producto B       15             15.0\n",
            "15  2024-01-03  Producto C        5              7.0\n",
            "16           0  Producto B      NaN             10.0\n",
            "17  2024-01-03         NaN        5              7.0\n",
            "18         NaN         NaN      NaN              NaN\n",
            "19                                               0.0\n",
            "20                     NaN        5              7.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Limpiar los datos\n",
        "# Reemplazar espacios en blanco en las columnas por NaN\n",
        "df.replace(r'^\\s*$', np.nan, regex=True, inplace=True)\n",
        "\n",
        "# Eliminar filas con valores nulos\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# Asegurarse de que las columnas numéricas sean del tipo correcto\n",
        "df['cantidad'] = df['cantidad'].astype(int)\n",
        "df['precio_unitario'] = df['precio_unitario'].astype(float)\n",
        "\n",
        "# Mostrar los datos limpios\n",
        "print(\"\\nDatos limpios:\")\n",
        "print(df.head)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZpVGs-ni6vZu",
        "outputId": "9d867048-2f2a-472c-f036-724b5d8f4a47"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Datos limpios:\n",
            "<bound method NDFrame.head of         fecha    producto  cantidad  precio_unitario\n",
            "1  2024-01-01  Producto B         9              9.0\n",
            "2  2024-01-02           0        20              5.0\n",
            "3  2024-01-02  Producto C        15              4.0\n",
            "4  2024-01-02  Producto B        15              3.0\n",
            "7  2024-01-02  Producto C        15              2.0\n",
            "8  2024-01-04  Producto B        15             15.0\n",
            "9  2024-01-07  Producto C        15              0.0\n",
            "10 2024-01-07  Producto C        15             15.0\n",
            "11 2024-01-03  Producto C         5              7.0\n",
            "12 2024-01-04  Producto A        15             15.0\n",
            "13 2024-01-07  Producto B        15              0.0\n",
            "14 2024-01-07  Producto B        15             15.0\n",
            "15 2024-01-03  Producto C         5              7.0>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 3.1) El total de ventas por cada producto\n",
        "\n",
        "df['total_venta'] = df['cantidad'] * df['precio_unitario']\n",
        "total_ventas_por_producto = df.groupby('producto')['total_venta'].sum().reset_index()\n",
        "print(\"\\nTotal de ventas por producto:\")\n",
        "print(total_ventas_por_producto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I-Su3Drm6wIO",
        "outputId": "2ab448cc-23ea-46c1-dd1e-fde832b94533"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Total de ventas por producto:\n",
            "     producto  total_venta\n",
            "0           0        100.0\n",
            "1  Producto A        225.0\n",
            "2  Producto B        576.0\n",
            "3  Producto C        385.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3.2) El producto más vendido según el valor de venta\n",
        "producto_mas_vendido = total_ventas_por_producto.loc[total_ventas_por_producto['total_venta'].idxmax()]\n",
        "print(\"\\nProducto más vendido:\")\n",
        "print(producto_mas_vendido)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YLL9MSj06wqe",
        "outputId": "4799a785-7e3c-4739-8ed6-c9ac0756a9c5"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Producto más vendido:\n",
            "producto       Producto B\n",
            "total_venta         576.0\n",
            "Name: 2, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3.3) Los 5 días con mayor cantidad de ventas\n",
        "ventas_por_dia = df.groupby('fecha')['cantidad'].sum().reset_index()\n",
        "top_5_dias = ventas_por_dia.nlargest(5, 'cantidad')\n",
        "print(\"\\nTop 5 días con mayor cantidad de ventas:\")\n",
        "print(top_5_dias)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "86RS4Y3z6w8-",
        "outputId": "b65f5405-74f7-4cf9-b35e-5c748aabb759"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 5 días con mayor cantidad de ventas:\n",
            "       fecha  cantidad\n",
            "1 2024-01-02        65\n",
            "4 2024-01-07        60\n",
            "3 2024-01-04        30\n",
            "2 2024-01-03        10\n",
            "0 2024-01-01         9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4) Gráfico de barras de las ventas por producto\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(total_ventas_por_producto['producto'], total_ventas_por_producto['total_venta'], color='skyblue')\n",
        "plt.title('Total de Ventas por Producto')\n",
        "plt.xlabel('Producto')\n",
        "plt.ylabel('Total de Ventas')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "D2ntJRs_HiOg",
        "outputId": "516872b6-0a80-422d-bfd2-bc387aec3611"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}